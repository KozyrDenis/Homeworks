import UIKit

// MARK: - üè† –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.
 
// TODO: - üßë‚Äçüíª –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –†–µ—à–µ–Ω–∏–µ –ø–∏—à–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ –∑–∞–¥–∞–Ω–∏—è:
 // - —Å–æ–∑–¥–∞–π—Ç–µ enumeration —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –º—É–∑—ã–∫–∏, –∞-–ª—è pop, rock, classic –∏ —Ç.–¥.
 
enum musicGenre: String, CaseIterable {
    case POP = "Creed"
    case Rap = "2Pac"
    case Rock = "LinkinPark"
    case Classic = "Bethoween"
}
 // - –æ–±—ä—è–≤–∏—Ç–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É myFavoriteStyle –∏ –ø—Ä–∏—Å–≤–æ–π—Ç–µ –µ–π –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ enumeration
var myFavouriteStyle = musicGenre.Rap
 // - —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ enumeration, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Ç–µ—Ä–∞—Ü–∏—é
for i in musicGenre.allCases {
    print(i)
}
 // - –¥–æ–±–∞–≤—å—Ç–µ –≤ enumeration raw value —Ç–∏–ø–∞ String, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –∏–º–µ–Ω–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞

 // - –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É singerStyle, –∏—Å–ø–æ–ª—å–∑—É—è rawValue
let singerStyle = musicGenre(rawValue: "2Pac")

// - –Ω–∞–ø–∏—à–∏—Ç–µ switch statement, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å singerStyle —Å cases –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–∏ –∏ –ø–µ—á–∞—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –ø–µ—Å–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∂–∞–Ω—Ä–∞
switch "2Pac" {
case("Rock"):
    print("In the End")
case("Rap"):
    print("Lose youself")
case("POP"):
    print("–¶–≤–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —á–µ—Ä–Ω—ã–π")
case("Classic"):
    print("for Eliza")
default:
    print("Error")
}
 // - –ü—Ä–µ–¥—Å—Ç–∞–≤—Ç–µ, —á—Ç–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–∏—Ü—Ü—ã. –°–æ–∑–¥–∞–π—Ç–µ enumeration —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –ø–∏—Ü—Ü—ã small, medium, big. –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å enum —Å associated values, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤: –¥–ª—è small - –æ–¥–∏–Ω, –¥–ª—è medium - –¥–≤–∞, –¥–ª—è big - —Ç—Ä–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞.
enum pizza {
    case Big(Ingredients: [String])
    case small(Ingredients: String)
    case medium(Ingredients: [String])
}
pizza.medium(Ingredients: ["cucumber", "spicy"])
pizza.Big(Ingredients: ["cucumber", "spicy","meat"])
pizza.small(Ingredients: ("tomatoes"))
 // - –°–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—Å–≤–æ–π—Ç–µ —Ç—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ enum —Å –ø–∏—Ü—Ü–æ–π.
var mediumPizza = pizza.medium(Ingredients: ["cucumber", "spicy"])
var bigPizza = pizza.Big(Ingredients: ["cucumber", "spicy","meat"])
var smallPizza = pizza.small(Ingredients: ("tomatoes"))

 // - –ù–∞–ø–∏—à–∏—Ç–µ switch, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—Ä–µ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∏—Ü—Ü—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö. –ß—Ç–æ-—Ç–æ —Ç–∏–ø–∞ "Your order is - The big pizza with mashrooms, sheese, bacon"
switch bigPizza {
case(pizza.medium(Ingredients: ["cucumber", "spicy"])):
    print("Your order is the medium pizza with \(mediumPizza)")
case(pizza.small(Ingredients: "tomatoes")):
    print("Your order is the small pizza with \(smallPizza)")
case(pizza.Big(Ingredients: ["cucumber", "spicy","meat"])):
    print("Your order is the big pizza with \(bigPizza)")
default:
    print("You don't have an order")
}
/*
 TODO: - ‚ùì –í–æ–ø—Ä–æ—Å—ã –∫ –∏–∑—É—á–µ–Ω–∏—é (–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–µ –Ω—É–∂–Ω–æ, –Ω–æ –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º –æ—Ç–≤–µ—Ç–∏—Ç—å):
 - –ß—Ç–æ —Ç–∞–∫–æ–µ enumerations?
 - –î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª CaseIterable?
 - –ß—Ç–æ —Ç–∞–∫–æ–µ Recursive Enumerations?
 */
